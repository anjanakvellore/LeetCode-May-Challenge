Problem Statement:

Cousins in Binary Tree

In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

Example 1:
Input: root = [1,2,3,4], x = 4, y = 3
Output: false

Example 2:
Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true

Example 3:
Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false

Note:

The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.

My solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        Map<Integer,Integer> parentMap = new HashMap();
        Map<Integer,Integer> depthMap = new HashMap();
        Queue<TreeNode> queue = new LinkedList();
        queue.add(root);
        parentMap.put(root.val,-1);
        depthMap.put(root.val,0);
        
        while(!parentMap.containsKey(x) || !parentMap.containsKey(y)){
            int size = queue.size();
            for(int i=0;i<size;i++){
                TreeNode parent = queue.poll();
                int level = depthMap.get(parent.val);
                System.out.println("Parent: "+parent.val);
                if(parent.left!=null){
                    //System.out.println("Left Child: "+parent.left.val);
                    queue.add(parent.left);
                    parentMap.put(parent.left.val,parent.val);
                    depthMap.put(parent.left.val,level+1);
                    
                }
                if(parent.right!=null){
                    queue.add(parent.right);
                    //System.out.println("Right child: "+parent.right.val);
                    parentMap.put(parent.right.val,parent.val);
                    depthMap.put(parent.right.val,level+1);
                }
            }
        }
        
        //System.out.println(parentMap);
        //System.out.println(depthMap);
        if((parentMap.get(x)!=parentMap.get(y)) && (depthMap.get(x) == depthMap.get(y))){
            return true;
        } 
        
        return false;
        
    }
}